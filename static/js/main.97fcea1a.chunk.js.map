{"version":3,"sources":["components/Task/Task.js","components/TimeAxis/TimeAxis.js","components/Timeline/Timeline.js","store/mock-database.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Task","name","absoluteTop","absoluteLeft","width","height","className","style","top","left","MONTH_MAP","TimeAxis","topOrigin","leftOrigin","maxSpread","dayWidth","dayOrigin","months","dates","Array","fill","forEach","item","i","currentDay","Date","getTime","push","getDate","getMonth","getDaySpread","dateA","dateB","Math","floor","Timeline","store","now","timelineMap","tasks","_","dayOffset","StartDate","spread","DueDate","j","isCollision","Name","TOP_ORIGIN","Id","App","MockDatabase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97fcea1a.chunk.js","sourcesContent":["// TODO: Center text vertically\n// TODO: CHange layout to add transparent padding\n\nimport './Task.css';\n\nfunction Task({name, absoluteTop, absoluteLeft, width, height}) {\n  return (\n    <div\n      className=\"Task\"\n      style={{\n        top: absoluteTop,\n        left: absoluteLeft,\n        width: width,\n        height: height,\n      }}>\n      {name}\n    </div>\n  );\n}\n\nexport default Task;\n","import './TimeAxis.css';\n\nconst MONTH_MAP = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n]\n\nfunction TimeAxis({topOrigin, leftOrigin, maxSpread, dayWidth, dayOrigin, height}) {\n  const months = [];\n  const dates = [];\n\n  Array(maxSpread).fill(0).forEach((item, i) => {\n    // Get Date\n    const currentDay = new Date(dayOrigin.getTime() + i * 86400000)\n\n    // Add Date\n    dates.push(\n      <div\n        key={i}\n        className=\"time\"\n        style={{\n          top: topOrigin + height,\n          left: leftOrigin + dayWidth * i,\n          width: dayWidth,\n          height: height,\n        }}>\n        {currentDay.getDate()}\n      </div>\n    );\n\n    // Add Month\n    if (i === 0 || currentDay.getDate() === 1) {\n      months.push(\n        <div\n          key={i}\n          className=\"month\"\n          style={{\n            top: topOrigin,\n            left: leftOrigin + dayWidth * i,\n            width: dayWidth,\n            height: height,\n          }}>\n          {MONTH_MAP[currentDay.getMonth()]}\n        </div>\n      );\n    }\n  });\n\n  return (\n    <div className=\"TimeAxis\">\n      {months}\n      {dates}\n    </div>\n  );\n}\n\nexport default TimeAxis;\n","// TODO: Anchor point for Timeline with dynamic position\n// TODO: Get Dynamic Window width for TimeAxis\n// NOTE: Dynamic Constant\n\nimport Task from \"../Task/Task\";\nimport TimeAxis from \"../TimeAxis/TimeAxis\";\n\nimport './Timeline.css';\n\n// Constant in pixel\nconst DAY_WIDTH = 80;\nconst TASK_HEIGHT = 50;\n\nconst TOP_ORIGIN = 2 * TASK_HEIGHT;\nconst LEFT_ORIGIN = 0;\n\nconst DEPTH_LIMIT = 100;\n\n// Functions\n// TODO: More resiliant day spread calculator for multiple timezone and change in day time\nfunction getDaySpread(dateA, dateB) {\n  return Math.floor((dateB.getTime() - dateA.getTime()) / 86400000);\n}\n\nfunction Timeline({store}) {\n  const dayOrigin = new Date(Date.now() - 7 * 86400000);\n\n  const timelineMap = {};\n  const tasks = [];\n\n  store.forEach((item, _) => {\n    // Get offset and spread\n    const dayOffset = getDaySpread(dayOrigin, item.StartDate);\n    const spread = getDaySpread(item.StartDate, item.DueDate) + 1;\n\n    // Check for collision\n    let j = 0;\n    let isCollision = false;\n    do {\n      isCollision = false;\n      for (let i = 0; i < spread; i++) {\n        if (timelineMap[`${dayOffset + i}:${j}`] === true) {\n          isCollision = true;\n          break;\n        };\n      };\n      j += 1;\n    } while (isCollision && j < DEPTH_LIMIT)\n    j -= 1;\n\n    // Populate map\n    for (let i = 0; i < spread; i++) {\n      timelineMap[`${dayOffset + i}:${j}`] = true;\n    };\n\n    // Add tasks\n    if (dayOffset + spread - 1 >= 0) {\n      tasks.push(\n        <Task\n          key={`${dayOffset}-${j}`}\n          name={item.Name}\n          absoluteTop={TOP_ORIGIN + TASK_HEIGHT * j}\n          absoluteLeft={LEFT_ORIGIN + DAY_WIDTH * dayOffset}\n          width={DAY_WIDTH * spread}\n          height={TASK_HEIGHT}\n        />\n      );\n    };\n  });\n  \n  return (\n    <div\n    className=\"Timeline\">\n      <TimeAxis\n        topOrigin={TOP_ORIGIN - 2 * TASK_HEIGHT}\n        leftOrigin={LEFT_ORIGIN}\n        maxSpread={50}\n        dayWidth={DAY_WIDTH}\n        dayOrigin={dayOrigin}\n        height={TASK_HEIGHT}\n      />\n      {tasks}\n    </div>\n  );\n}\n\nexport default Timeline;\n","const store =  [\n  {\n    Id: \"1\",\n    Name: \"Task 1\",\n    StartDate: new Date(Date.now() - 2 * 86400000),\n    DueDate: new Date(Date.now() + 86400000),\n  },\n  {\n    Id: \"2\",\n    Name: \"Task 2\",\n    StartDate: new Date(Date.now() - 86400000),\n    DueDate: new Date(Date.now() + 2 * 86400000),\n  },\n  {\n    Id: \"3\",\n    Name: \"Task 3\",\n    StartDate: new Date(Date.now() - 86400000),\n    DueDate: new Date(Date.now() + 86400000),\n  },\n  {\n    Id: \"4\",\n    Name: \"Task 4\",\n    StartDate: new Date(Date.now() + 86400000),\n    DueDate: new Date(Date.now() + 86400000),\n  },\n  {\n    Id: \"5\",\n    Name: \"Task 5\",\n    StartDate: new Date(Date.now()),\n    DueDate: new Date(Date.now()),\n  },\n  {\n    Id: \"6\",\n    Name: \"Task 6\",\n    StartDate: new Date(Date.now() - 86400000),\n    DueDate: new Date(Date.now() - 86400000),\n  },\n];\n\nexport default store;\n","import Timeline from \"../Timeline/Timeline\"\n\nimport MockDatabase from \"../../store/mock-database.js\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timeline\n        store={MockDatabase} \n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}